// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteApi.Data;

namespace NoteApi.Migrations
{
    [DbContext(typeof(NoteDbContext))]
    [Migration("20211103062254_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("NoteApi.Data.Tables.ContentNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("ContentNote");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Fix lights",
                            NoteId = 5
                        },
                        new
                        {
                            Id = 2,
                            Content = "Paint walls",
                            NoteId = 5
                        },
                        new
                        {
                            Id = 3,
                            Content = "This is so sicret that I had to write it down",
                            NoteId = 7
                        });
                });

            modelBuilder.Entity("NoteApi.Data.Tables.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Folder");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HomeDirectory",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dokumenti",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "SomeRandomFolder",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "ToJemihovFolder",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("NoteApi.Data.Tables.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsListNote")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Note");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FolderId = 2,
                            IsListNote = false,
                            Name = "FirstNote.txt",
                            Title = "Start of first note",
                            TypeId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            FolderId = 2,
                            IsListNote = true,
                            Name = "Holidays.txt",
                            Title = "Christmas plans:",
                            TypeId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            FolderId = 2,
                            IsListNote = true,
                            Name = "PetTodoList.txt",
                            Title = "What to do to get a new pet:",
                            TypeId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            FolderId = 4,
                            IsListNote = false,
                            Name = "Miha Europa CV",
                            Title = "Profesional painter",
                            TypeId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            FolderId = 4,
                            IsListNote = true,
                            Name = "Home Renovation TODO:",
                            Title = "What to do to get a new pet:",
                            TypeId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            FolderId = 4,
                            IsListNote = false,
                            Name = "Note 1",
                            Title = "Some special note",
                            TypeId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            FolderId = 4,
                            IsListNote = false,
                            Name = "Note 2",
                            Title = "And a sicret note to someone",
                            TypeId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            FolderId = 4,
                            IsListNote = false,
                            Name = "Note 3",
                            Title = "Motorbike parts",
                            TypeId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("NoteApi.Data.Tables.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "private"
                        },
                        new
                        {
                            Id = 2,
                            Name = "public"
                        });
                });

            modelBuilder.Entity("NoteApi.Data.Tables.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Janez Novak",
                            Password = "1234",
                            UserName = "janezNovak"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Miha Nagode",
                            Password = "4321",
                            UserName = "mihaNagode"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Anja Hudovernik",
                            Password = "9999",
                            UserName = "anjaHudovernik"
                        });
                });

            modelBuilder.Entity("NoteApi.Data.Tables.ContentNote", b =>
                {
                    b.HasOne("NoteApi.Data.Tables.Note", null)
                        .WithMany("Content")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteApi.Data.Tables.Folder", b =>
                {
                    b.HasOne("NoteApi.Data.Tables.User", null)
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteApi.Data.Tables.Note", b =>
                {
                    b.HasOne("NoteApi.Data.Tables.Folder", null)
                        .WithMany("Notes")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteApi.Data.Tables.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteApi.Data.Tables.User", null)
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NoteApi.Data.Tables.Folder", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("NoteApi.Data.Tables.Note", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("NoteApi.Data.Tables.User", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
